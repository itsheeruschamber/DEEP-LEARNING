# -*- coding: utf-8 -*-
"""EXP 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fbt3dGzLud9HWWVS-U5tsynxThbjMSuH
"""

import numpy as np
from tensorflow.keras.datasets import imdb
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, GRU, LSTM, Dense
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split

# Load the IMDB dataset
vocab_size = 10000
max_len = 200
(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=vocab_size)

# Pad sequences to a fixed length
X_train = pad_sequences(X_train, maxlen=max_len)
X_test = pad_sequences(X_test, maxlen=max_len)

# One-hot encode the labels
y_train = to_categorical(y_train, num_classes=2)
y_test = to_categorical(y_test, num_classes=2)

# Split the training data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)

# Define a GRU-based model
model_gru = Sequential()
model_gru.add(Embedding(vocab_size, 128, input_length=max_len))
model_gru.add(GRU(64))
model_gru.add(Dense(2, activation='softmax'))
model_gru.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the GRU model
model_gru.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=3, batch_size=64)

# Evaluate the GRU model
gru_loss, gru_accuracy = model_gru.evaluate(X_test, y_test)
print(f"GRU Model - Test Loss: {gru_loss:.4f}, Test Accuracy: {gru_accuracy:.4f}")

# Define an LSTM-based model
model_lstm = Sequential()
model_lstm.add(Embedding(vocab_size, 128, input_length=max_len))
model_lstm.add(LSTM(64))
model_lstm.add(Dense(2, activation='softmax'))
model_lstm.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train the LSTM model
model_lstm.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=3, batch_size=64)

# Evaluate the LSTM model
lstm_loss, lstm_accuracy = model_lstm.evaluate(X_test, y_test)
print(f"LSTM Model - Test Loss: {lstm_loss:.4f}, Test Accuracy: {lstm_accuracy:.4f}")